{"version":3,"sources":["components.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","squares","i","size","row","j","push","status","useState","xIsNext","state","setState","winner","setWinner","handleClick","y","x","currentY","currentX","getContinousChess","checkWinner","map","each","rowIndex","colIndex","nextX","nextY","currentColor","tmpX","tmpY","total","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","theme","colors","background","border","font","first_button","second_button","button_font","document","getElementById"],"mappings":"iNAGA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,QAKb,SAASC,EAAMJ,GAEb,IADA,IAAMK,EAAU,GACPC,EAAI,EAAGA,EAAIN,EAAMO,KAAMD,IAAK,CAEnC,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIT,EAAMO,KAAME,IAC9BD,EAAIE,KAAK,MAEXL,EAAQK,KAAKF,GAEf,IA0BIG,EA1BJ,EAA0BC,mBAAS,CACjCP,UACAQ,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAIA,EAA4BH,mBAAS,MAArC,mBAAOI,EAAP,KAAeC,EAAf,KAEA,SAASC,EAAYC,EAAGC,GACtB,IAAMf,EAAUS,EAAMT,QAClBA,EAAQc,GAAGC,IACXJ,IACJX,EAAQc,GAAGC,GAAKN,EAAMD,QAAU,SAAM,SACtCE,EAAS,CACPV,UACAQ,SAAUC,EAAMD,UAmCtB,SAAqBR,EAASgB,EAAUC,GACtC,OACEC,EAAkBlB,EAASgB,EAAUC,EAAU,EAAG,GAChDC,EAAkBlB,EAASgB,EAAUC,GAAW,EAAG,IACnD,GACFC,EAAkBlB,EAASgB,EAAUC,EAAU,EAAG,GAChDC,EAAkBlB,EAASgB,EAAUC,EAAU,GAAI,IACnD,GACFC,EAAkBlB,EAASgB,EAAUC,EAAU,EAAG,GAChDC,EAAkBlB,EAASgB,EAAUC,GAAW,GAAI,IACpD,GACFC,EAAkBlB,EAASgB,EAAUC,GAAW,EAAG,GACjDC,EAAkBlB,EAASgB,EAAUC,EAAU,GAAI,IACnD,EA9CEE,CAAYnB,EAASc,EAAGC,IAC1BH,EAAUZ,EAAQc,GAAGC,KAgBzB,OAJET,EADEK,EACO,WAAaA,EAEb,iBAAmBF,EAAMD,QAAU,SAAM,UAGlD,gCACE,qBAAKZ,UAAU,SAAf,SAAyBU,IACxBN,EAAQoB,KAAI,SAACC,EAAMC,GAClB,OACE,qBAAK1B,UAAU,YAAf,SACGI,EAAQoB,KAAI,SAACC,EAAME,GAClB,OAlBUT,EAkBUQ,EAlBPP,EAkBiBQ,EAhBtC,cAAC7B,EAAD,CAAQI,MAAOW,EAAMT,QAAQc,GAAGC,GAAIlB,QAAS,kBAAMgB,EAAYC,EAAGC,MAFtE,IAAsBD,EAAGC,aA4C3B,SAASG,EAAkBlB,EAASgB,EAAUC,EAAUO,EAAOC,GAC7D,IAAMC,EAAe1B,EAAQgB,GAAUC,GACnCU,EAAOV,EAAWO,EAClBI,EAAOZ,EAAWS,EAClBI,EAAQ,EAEZ,GAAIF,EAAO,EAAG,OAAO,EACrB,GAAIC,EAAO,EAAG,OAAO,EACrB,GAAID,EAAO3B,EAAQ8B,OAAS,EAAG,OAAO,EACtC,GAAIF,EAAO5B,EAAQ8B,OAAS,EAAG,OAAO,EAEtC,KAAO9B,EAAQ4B,GAAMD,KAAUD,GAAc,CAI3C,GAHAG,KACAF,GAAQH,GAEG,EAAG,OAAOK,EACrB,IAFAD,GAAQH,GAEG,EAAG,OAAOI,EACrB,GAAIF,EAAO3B,EAAQ8B,OAAS,EAAG,OAAOD,EACtC,GAAID,EAAO5B,EAAQ8B,OAAS,EAAG,OAAOD,EAExC,OAAOA,EC5FME,MAVf,WACE,OACE,qBAAKnC,UAAU,OAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CAAOG,KAAM,UCKN8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCSdQ,IAASC,OACP,cAAC,IAAD,CAAeC,MAXH,CACZC,OAAQ,CACNC,WAAW,UACXC,OAAO,UACPC,KAAK,UACLC,aAAa,UACbC,cAAc,UACdC,YAAY,YAId,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.127bd817.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const squares = [];\n  for (let i = 0; i < props.size; i++) {\n    const row = [];\n    for (let j = 0; j < props.size; j++) {\n      row.push(null);\n    }\n    squares.push(row);\n  }\n  const [state, setState] = useState({\n    squares,\n    xIsNext: true,\n  });\n  const [winner, setWinner] = useState(null);\n\n  function handleClick(y, x) {\n    const squares = state.squares;\n    if (squares[y][x]) return;\n    if (winner) return;\n    squares[y][x] = state.xIsNext ? \"●\" : \"○\";\n    setState({\n      squares,\n      xIsNext: !state.xIsNext,\n    });\n    if (checkWinner(squares, y, x)) {\n      setWinner(squares[y][x]);\n      return;\n    }\n  }\n\n  function renderSquare(y, x) {\n    return (\n      <Square value={state.squares[y][x]} onClick={() => handleClick(y, x)} />\n    );\n  }\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (state.xIsNext ? \"●\" : \"○\");\n  }\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      {squares.map((each, rowIndex) => {\n        return (\n          <div className=\"board-row\">\n            {squares.map((each, colIndex) => {\n              return renderSquare(rowIndex, colIndex);\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction checkWinner(squares, currentY, currentX) {\n  return (\n    getContinousChess(squares, currentY, currentX, 1, 0) +\n      getContinousChess(squares, currentY, currentX, -1, 0) >=\n      4 ||\n    getContinousChess(squares, currentY, currentX, 0, 1) +\n      getContinousChess(squares, currentY, currentX, 0, -1) >=\n      4 ||\n    getContinousChess(squares, currentY, currentX, 1, 1) +\n      getContinousChess(squares, currentY, currentX, -1, -1) >=\n      4 ||\n    getContinousChess(squares, currentY, currentX, -1, 1) +\n      getContinousChess(squares, currentY, currentX, 1, -1) >=\n      4\n  );\n}\n\nfunction getContinousChess(squares, currentY, currentX, nextX, nextY) {\n  const currentColor = squares[currentY][currentX];\n  let tmpX = currentX + nextX;\n  let tmpY = currentY + nextY;\n  let total = 0;\n\n  if (tmpX < 0) return 0;\n  if (tmpY < 0) return 0;\n  if (tmpX > squares.length - 1) return 0;\n  if (tmpY > squares.length - 1) return 0;\n\n  while (squares[tmpY][tmpX] === currentColor) {\n    total++;\n    tmpX += nextX;\n    tmpY += nextY;\n    if (tmpX < 0) return total;\n    if (tmpY < 0) return total;\n    if (tmpX > squares.length - 1) return total;\n    if (tmpY > squares.length - 1) return total;\n  }\n  return total;\n}\n\nexport { Board };\n","import { Board } from \"./components\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board size={19} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider } from \"styled-components\";\nconst theme = {\n  colors: {\n    background: `#EEF0F2`,\n    border: `#141414`,\n    font: `#011638`,\n    first_button: `#EEC643`,\n    second_button: `#0D21A1`,\n    button_font: `#EEF0F2`,\n  },\n};\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}